{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import * as utils from '@iobroker/adapter-core';\nimport puppeteer, { Page, Browser, ScreenshotOptions, ScreenshotClip } from 'puppeteer';\n\nclass PuppeteerAdapter extends utils.Adapter {\n    private browser: Browser | undefined;\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({ ...options, name: 'puppeteer' });\n\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        this.subscribeStates('url');\n        this.browser = await puppeteer.launch({ headless: true });\n        this.log.info('Ready to take screenshots');\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private async onUnload(callback: () => void): Promise<void> {\n        try {\n            if (this.browser) {\n                this.log.info('Closing browser');\n                await this.browser.close();\n                this.browser = undefined;\n            }\n            callback();\n        } catch {\n            callback();\n        }\n    }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (!this.browser) {\n            // unload called\n            return;\n        }\n\n        // user wants to perform a screenshot\n        if (state && state.val && !state.ack) {\n            const options: ScreenshotOptions = await this.gatherScreenshotOptions();\n\n            if (!options.path) {\n                this.log.error('Please specify a filename before taking a screenshot');\n                return;\n            }\n\n            this.log.debug(`Screenshot options: ${JSON.stringify(options)}`);\n            this.log.info(`Taking screenshot of \"${state.val}\"`);\n\n            try {\n                const page = await this.browser.newPage();\n                await page.goto(state.val as string, { waitUntil: 'networkidle2' });\n\n                await this.waitForConditions(page);\n\n                await page.screenshot(options);\n\n                // set ack true, to inform about screenshot creation\n                this.log.info('Screenshot sucessfully saved');\n                await this.setStateAsync(id, state.val, true);\n                await page.close();\n            } catch (e) {\n                this.log.error(`Could not take screenshot of \"${state.val}\": ${e.message}`);\n            }\n        }\n    }\n\n    /**\n     * Determines the ScreenshotOptions by the current configuration states\n     */\n    private async gatherScreenshotOptions(): Promise<ScreenshotOptions> {\n        const options: ScreenshotOptions = {};\n\n        // get the path\n        const filenameState = await this.getStateAsync('filename');\n        if (filenameState && filenameState.val) {\n            options.path = filenameState.val as string;\n        }\n\n        // check fullPage flag\n        const fullPageState = await this.getStateAsync('fullPage');\n        if (fullPageState) {\n            options.fullPage = !!fullPageState.val;\n        }\n\n        if (!options.fullPage) {\n            const clipOptions: ScreenshotClip | void = await this.gatherScreenshotClipOptions();\n\n            if (clipOptions) {\n                options.clip = clipOptions;\n            }\n        } else {\n            this.log.debug('Ingoring clip options, because full page is desired');\n        }\n\n        return options;\n    }\n\n    /**\n     * Determines the ScreenshotClipOptions by the current configuration states\n     */\n    private async gatherScreenshotClipOptions(): Promise<ScreenshotClip | void> {\n        const options: Partial<ScreenshotClip> = {};\n\n        const clipAttributes = {\n            clipLeft: 'x',\n            clipTop: 'y',\n            clipHeight: 'height',\n            clipWidth: 'width'\n        } as const;\n\n        for (const [id, attributeName] of Object.entries(clipAttributes)) {\n            const clipAttributeState = await this.getStateAsync(id);\n            if (clipAttributeState && typeof clipAttributeState.val === 'number') {\n                options[attributeName] = clipAttributeState.val;\n            } else {\n                this.log.debug(`Ignoring clip, because \"${id}\" is not configured`);\n                return;\n            }\n        }\n\n        return options as ScreenshotClip;\n    }\n\n    /**\n     * Waits until the user configured conditions are fullfilled\n     *\n     * @param page active page object\n     */\n    private async waitForConditions(page: Page): Promise<void> {\n        // selector has highest priority\n        const selector = (await this.getStateAsync('waitForSelector'))?.val;\n        if (selector && typeof selector === 'string') {\n            this.log.debug(`Waiting for selector \"${selector}\"`);\n            await page.waitForSelector(selector);\n            return;\n        }\n\n        const renderTimeMs = (await this.getStateAsync('renderTime'))?.val;\n        if (renderTimeMs && typeof renderTimeMs === 'number') {\n            this.log.debug(`Waiting for timeout \"${renderTimeMs}\" ms`);\n            await page.waitForTimeout(renderTimeMs);\n            return;\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new PuppeteerAdapter(options);\n} else {\n    // otherwise start the instance directly\n    (() => new PuppeteerAdapter())();\n}\n"],
  "mappings": "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",
  "names": []
}
