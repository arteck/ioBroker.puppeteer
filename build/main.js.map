{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import * as utils from '@iobroker/adapter-core';\n//import * as puppeteer from 'puppeteer';\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst puppeteer = require('puppeteer');\nimport { Browser, ScreenshotOptions } from 'puppeteer';\n\nclass PuppeteerAdapter extends utils.Adapter {\n    private browser: Browser | undefined;\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({ ...options, name: 'puppeteer' });\n\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        this.subscribeStates('url');\n        this.log.info('ready');\n        this.browser = await puppeteer.launch({ headless: true });\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private async onUnload(callback: () => void): Promise<void> {\n        this.log.info('shutting down');\n        try {\n            if (this.browser) {\n                await this.browser.close();\n                this.browser = undefined;\n            }\n            callback();\n        } catch {\n            callback();\n        }\n    }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private async onStateChange(_id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (!this.browser) {\n            // unload called\n            return;\n        }\n\n        // user wants to perform a screenshot\n        if (state && state.val) {\n            const options: ScreenshotOptions = {};\n            // get the path\n            const filenameState = await this.getStateAsync('filename');\n            if (filenameState && filenameState.val) {\n                options.path = filenameState.val as string;\n            } else {\n                this.log.warn('Please specify a filename before taking screenshots');\n            }\n\n            this.log.info(`Taking screenshot of \"${state.val}\"`);\n\n            try {\n                const page = await this.browser.newPage();\n\n                await page.goto(state.val as string, { waitUntil: 'networkidle2' });\n                await page.screenshot(options);\n                this.log.info('Screenshot sucessfully saved');\n            } catch (e) {\n                this.log.error(`Could not take screenshot of \"${state.val}\": ${e.message}`);\n            }\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new PuppeteerAdapter(options);\n} else {\n    // otherwise start the instance directly\n    (() => new PuppeteerAdapter())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,YAAuB;AAGvB,MAAM,YAAY,QAAQ,WAAW;AAGrC,MAAM,yBAAyB,MAAM,QAAQ;AAAA,EAElC,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM,iCAAK,UAAL,EAAc,MAAM,YAAY,EAAC;AAEvC,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AACpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA,QAKc,UAAyB;AACnC,SAAK,gBAAgB,KAAK;AAC1B,SAAK,IAAI,KAAK,OAAO;AACrB,SAAK,UAAU,MAAM,UAAU,OAAO,EAAE,UAAU,KAAK,CAAC;AAAA,EAC5D;AAAA,QAKc,SAAS,UAAqC;AACxD,SAAK,IAAI,KAAK,eAAe;AAC7B,QAAI;AACA,UAAI,KAAK,SAAS;AACd,cAAM,KAAK,QAAQ,MAAM;AACzB,aAAK,UAAU;AAAA,MACnB;AACA,eAAS;AAAA,IACb,QAAE;AACE,eAAS;AAAA,IACb;AAAA,EACJ;AAAA,QAKc,cAAc,KAAa,OAAyD;AAC9F,QAAI,CAAC,KAAK,SAAS;AAEf;AAAA,IACJ;AAGA,QAAI,SAAS,MAAM,KAAK;AACpB,YAAM,UAA6B,CAAC;AAEpC,YAAM,gBAAgB,MAAM,KAAK,cAAc,UAAU;AACzD,UAAI,iBAAiB,cAAc,KAAK;AACpC,gBAAQ,OAAO,cAAc;AAAA,MACjC,OAAO;AACH,aAAK,IAAI,KAAK,qDAAqD;AAAA,MACvE;AAEA,WAAK,IAAI,KAAK,yBAAyB,MAAM,MAAM;AAEnD,UAAI;AACA,cAAM,OAAO,MAAM,KAAK,QAAQ,QAAQ;AAExC,cAAM,KAAK,KAAK,MAAM,KAAe,EAAE,WAAW,eAAe,CAAC;AAClE,cAAM,KAAK,WAAW,OAAO;AAC7B,aAAK,IAAI,KAAK,8BAA8B;AAAA,MAChD,SAAS,GAAP;AACE,aAAK,IAAI,MAAM,iCAAiC,MAAM,SAAS,EAAE,SAAS;AAAA,MAC9E;AAAA,IACJ;AAAA,EACJ;AACJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,iBAAiB,OAAO;AACzG,OAAO;AAEH,EAAC,OAAM,IAAI,iBAAiB,GAAG;AACnC;",
  "names": []
}
